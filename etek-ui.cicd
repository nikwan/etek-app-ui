pipeline {
    agent {
        kubernetes {
            inheritFrom 'ecc'
            defaultContainer 'node14'
        }
    }
    //global env
    environment { 
                gitBranch = 'develop';
                refsb = "${env.refsb != null ? env.refsb : 'develop'}";
                hrefr = "${env.hrefr != null ? env.hrefr : env.SVN_URL + '/ecc.git'}";
                pprtype = "${env.pprtype}";
                eventKey = "${env.eventKey}";
                TYPE = "${env.type}";
                DEPLOY_K8S = false;
    }
    stages {
        stage('Cleanup'){
            steps{
                // Clean before build
                //cleanWs()
                echo "cleanWs:enabled"
            }
        }
        stage('set-env') {
            steps {
                script{
               	sh "ls -l"
                }
            }
        }
        stage('setup-npm-k8s'){
            steps{
                dir('etek-app-ui'){
                	sh "ls -l"
                    //sh "cp  ${env.JENKINS_AGENT_WORKDIR}/workspace/${env.JOB_NAME}/ecc/k8s/apps/build/ecc-test/ecc-test-dockerfile ${env.JENKINS_AGENT_WORKDIR}/workspace/${env.JOB_NAME}/ecc-test-app/"
                    //sh "cp  ${env.JENKINS_AGENT_WORKDIR}/workspace/${env.JOB_NAME}/ecc/k8s/apps/build/ecc-test/ecc-test.yml ${env.JENKINS_AGENT_WORKDIR}/workspace/${env.JOB_NAME}/ecc-test-app/"
                }
            }
        }
        stage('Build ETEK UI') {
            steps {
                script{
                    dir('etek-app-ui'){
                    	sh "node --version"
                    	sh "npm install"
                    	sh "npm -v"
                        sh "npm run build -- --output-path=./dist/out --configuration development --output-hashing=all --base-href /etek-app-ui/"
                    }
                }
            }
        }
        stage('Build Image') {
            steps {
                script{
                    dir('etek-app-ui'){
                        COMMIT_ID = sh(returnStdout: true, 
                        script: 'git rev-list --tags --date-order | head -1').trim()
                        echo "commitId:${COMMIT_ID}"
                        
                        DOCKER_TAG = sh(returnStdout: true,
                        script: "git show-ref --tags | grep '${COMMIT_ID}' | awk -F /  \'{print  \$NF}\'").trim()
                        DOCKER_TAG = "v${BUILD_NUMBER}"
                        DEPLOY_K8S = true;
                        echo "DOCKER_TAG:${DOCKER_TAG}"
                        echo "DEPLOY_K8S:${DEPLOY_K8S}"
                        
                        if(DEPLOY_K8S){
                            echo "creating container image..."
                            container('docker'){
                                sh "docker build -t ${DOCKER_REPO}/etek-app-ui:${DOCKER_TAG} ."
                                sh "docker push ${DOCKER_REPO}/etek-app-ui:${DOCKER_TAG}"
                            }
                            echo "pushing container image..."
                        }
                    }
                }
            }
        }
        stage('Deploy K8s'){
            steps{
                script{
                dir('etek-app-ui'){
                    echo "commitId:${COMMIT_ID}"
                    echo "tag:${DOCKER_TAG}"
                    
                    if(DEPLOY_K8S){
                        echo "deploying ecc test ..."
                        container('kubectl'){
     					sh 'kubectl version'
                        sh "cat etek-app-ui.yml | sed -e 's/\${DOCKER_REPO}/'$DOCKER_REPO'/g;s/\${DOCKER_TAG}/'$DOCKER_TAG'/g' | kubectl -n ecc apply -f -"
                        }
                        echo "deploying ecc test finished..."
                    }
                }
            }
            }
        }
    }
}